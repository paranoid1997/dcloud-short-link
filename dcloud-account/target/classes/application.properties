#server.port=8001
#spring.application.name=dcloud-account-service
#
#
##----------服务注册和发现--------------
#spring.cloud.nacos.discovery.server-addr=47.102.124.13:8848
#spring.cloud.nacos.discovery.username=nacos
#spring.cloud.nacos.discovery.password=nacos
#
#
##用于rpc调用token验证
#rpc.token=Liu19971009
#
#
##-------redis连接配置-------
#spring.redis.client-type=jedis
#spring.redis.host=47.102.124.13
#spring.redis.password=Liu19971009
#spring.redis.port=6379
#spring.redis.jedis.pool.max-active=100
#spring.redis.jedis.pool.max-idle=100
#spring.redis.jedis.pool.min-idle=100
#spring.redis.jedis.pool.max-wait=60000
#
#
#
##-------分库分表数据源配置-------
#spring.shardingsphere.datasource.names=ds0
#spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
#spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
#spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://101.200.211.81:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
#spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
#spring.shardingsphere.datasource.ds0.maxPoolSize=50
#spring.shardingsphere.datasource.ds0.minPoolSize=50
#spring.shardingsphere.datasource.ds0.password=Liu19971009
#spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.ds0.username=root
#spring.shardingsphere.props.sql.show=true
#
#
## 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}
#spring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}
##水平分表策略+行表达式分片
#spring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }
#spring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no
##id生成策略
#spring.shardingsphere.sharding.tables.traffic.key-generator.column=id
#spring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}
#spring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE
#
#
#
##----------sms短信配置--------------
#sms.app-code=e5d8caac8369401b91462f8f1c6e4c58
#sms.template-id=M105EABDEC
#
#
#
##----------阿里云OSS配置--------------
#aliyun.oss.endpoint=oss-cn-hangzhou.aliyuncs.com
#aliyun.oss.access-key-id=LTAI5tHjCyZXXsqXqPzMtBvu
#aliyun.oss.access-key-secret=I4Jhw3NTmz7H7DJXHmzafT2CTE7ZkM
#aliyun.oss.bucketname=dcloud-link-liu
#
#
#
###----------rabbit配置--------------
#spring.rabbitmq.host=101.200.211.81
#spring.rabbitmq.port=5672
##需要手工创建虚拟主机
#spring.rabbitmq.virtual-host=dev
#spring.rabbitmq.username=admin
#spring.rabbitmq.password=password
##消息确认方式，manual(手动ack) 和auto(自动ack)
#spring.rabbitmq.listener.simple.acknowledge-mode=auto
##开启重试，消费者代码不能添加try catch捕获不往外抛异常
#spring.rabbitmq.listener.simple.retry.enabled=true
##最大重试次数
#spring.rabbitmq.listener.simple.retry.max-attempts=4
## 重试消息的时间间隔，5秒
#spring.rabbitmq.listener.simple.retry.initial-interval=5000
#
#
#
##----------xxl-job配置--------------
#logging.config=classpath:logback.xml
##调度中心部署地址,多个配置逗号分隔 "http://address01,http://address02"
#xxl.job.admin.addresses=http://47.102.124.13:8080/xxl-job-admin
##执行器token，非空时启用 xxl-job, access token
#xxl.job.accessToken=Liu19971009
## 执行器app名称,和控制台那边配置一样的名称，不然注册不上去
#xxl.job.executor.appname=traffic-app-executor
## [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。
##从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
#xxl.job.executor.address=
##[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"，
#xxl.job.executor.ip=
## [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
#xxl.job.executor.port=9999
##执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径
#xxl.job.executor.logpath=./data/logs/xxl-job/executor
##执行器日志保存天数
#xxl.job.executor.logretentiondays=30